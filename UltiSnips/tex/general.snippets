priority -50
extends texmath
global !p

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n"

	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{tabular}\n$0"

	snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\"

	snip.expand_anon(final_str)


def after_greek_letter():
  if t[1] and t[1][0] not in ['_', '^', ' ', '+', '-', '\\', ',']:
      space = ' '
      return space
  else:
      no_space = ''
      return no_space

def after_commands():
  if t[1] and t[1][0] not in ['_', '^', ' ', '+', '-', '\\', ',']:
      space = ' '
      return space
  else:
      no_space = ''
      return no_space

def after_delimiters():
  if t[1] and t[1][0] not in ['_', '^', ' ', '+', '-', '\\']:
      space = ' '
      return space
  else:
      no_space = ''
      return no_space


endglobal


#DOCUMENT
snippet documentclass "documentclass" b
\documentclass`!p snip.rv="[" if t[1] else ""`${1:options}`!p snip.rv = "]" if t[1] else ""`{${2:package}}
$0
endsnippet

snippet usepackage "usepackage" b
\usepackage`!p snip.rv='[' if t[1] else ""`${1:options}`!p snip.rv = ']' if t[1] else ""`{${2:package}}$0
endsnippet

snippet "(?<!\\)beg" "begin{} / end{}" riA
\begin{$1}
  $0
\end{$1}
endsnippet

snippet "be(gin)?( (\S+))?" "begin{} / end{}" ir
\begin{${1:`!p
snip.rv = match.group(3) if match.group(2) is not None else "something"`}}
	${2:${VISUAL}}
\end{$1}$0
endsnippet

##################
#  TEXTO NORMAL  #
##################
#smart quotes
snippet "\"([a-zA-Z0-9_´\s]+)\b\"\s" "smart quotes" Ar
\`\``!p snip.rv = match.group(1)`'' $0
endsnippet

# context "math()"
# snippet " "smart quotes" iA
# "
# endsnippet

# context "env('tikzpicture')"
# snippet " "smart quotes" iA
# "
# endsnippet


#caracteres especiales

#verb

#formating text
context "math()"
snippet text "text" i
\\text{${1:${VISUAL:text}}} ${0}
endsnippet

snippet textit "italic text" i
\\textit{${1:${VISUAL:text}}} ${0}
endsnippet

snippet textbf "bold face text" i
\\textbf{${1:${VISUAL:text}}} ${0}
endsnippet

snippet underline "underline text" i
\\underline{${1:${VISUAL:text}}} ${0}
endsnippet

snippet overline "overline text" i
\\overline{${1:${VISUAL:text}}} ${0}
endsnippet


#tamanos letras

#centrado
snippet center "center" i
\begin{center}
  $0
\end{center}
endsnippet

#espacio horizontal y vertical

#cajas

#multicol
snippet mul2 "two-column environment with multicol" i
\begin{multicols}{2}
	${0}
\end{multicols}
endsnippet

snippet mul3 "En tres columna" i
\begin{multicols}{3}
	${0}
\end{multicols}
endsnippet

#minipage

#parbox
snippet parboxImage "Parbox image" i
	\parbox{\widthparbox}{\pgfimage[width=\widthparbox]{\rootimage/${0}}}
endsnippet

snippet parboxText "Parbox text" i
\parbox{\widthparbox}{
  ${0}
}
endsnippet

#lineas 


#nota en pie de pagina
snippet ft "\footnote" i
\\footnote{${1:${VISUAL:text}}} ${0}
endsnippet

#texto como en la pantalla
snippet casy "codetex" i
\begin{codeasy}{lefthand ratio=0.6}
  $0
\end{codeasy}
endsnippet

snippet ct "codetex" i
\begin{codetex}{lefthand ratio=0.6}
  $0
\end{codetex}
endsnippet

snippet ctl "codetex" i
\begin{codetexlong}
  $0
\end{codetexlong}
endsnippet

snippet ctc "codetexcomment" i
\begin{codetexcomment}{lefthand ratio=0.6}
  $0
\end{codetexcomment}
endsnippet

snippet ctcl "codetexcommentlong" i
\begin{codetexcommentlong}
  $0
\end{codetexcommentlong}
endsnippet



#xcolor

#cajas

#notas en el margen

#enumerate
snippet enum "Enumerate" i
\begin{enumerate}
  \item $0
\end{enumerate}
endsnippet

snippet enuma "Enumerate" i
\begin{enumerate}[a)]
  \item $0
\end{enumerate}
endsnippet

snippet enumi "Enumerate" i
\begin{enumerate}[i)]
  \item $0
\end{enumerate}
endsnippet

snippet premisa "Enumerate" i
\begin{premisa}[p]
  \item $0
\end{premisa}
endsnippet

# Itemize
snippet item "Itemize" i
\begin{itemize}
  \item $0
\end{itemize}
endsnippet

context "env('enumerate')"
snippet "\s\sit" "item" riA
\item $0
endsnippet

context "env('itemquestion')"
snippet "\s\sit" "item" riA
\item $0
endsnippet

context "env('itemize')"
snippet "\s\sit" "item" riA
\item $0
endsnippet

context "env('description')"
snippet "\s\sit" "item" riA
\item[$1] $0
endsnippet


priority -100
context "env('ddescription')"
snippet "\s\sit" "item" riA
\item[$1] $0
endsnippet

#description
priority -100
snippet desc "Description" i
\begin{description}
  \item[$1] $0
\end{description}
endsnippet

#list description
priority 500
snippet ddesc "Description" i
\begin{ddescription}
  \item[$1] $0
\end{ddescription}
endsnippet

#otra entornos de enumeracion o listas
snippet nit "Lista con nombre" i
\begin{NameItem}[${1:nombre}]
  \item ${0}
\end{NameItem}
endsnippet

snippet iq "Preguntas" i
\begin{itemquestion}
  \item ${0}
\end{itemquestion}
endsnippet

#titulo
snippet maketitle "maketitle" i
\maketitle
endsnippet

#tabla contenido

#capitulo y secciones
snippet chapter "chapter" A
\chapter{$1}
$0
endsnippet

snippet SSE "section" iA
\section{$1}
$0
endsnippet

snippet SSS "subsection" iA
\subsection{$1}
$0
endsnippet

snippet SS2 "subsubsection" iA
\subsubsection{$1}
$0
endsnippet

#referencia
snippet figref "reference to a figure" i
\\ref{fig:${1}} ${0}
endsnippet

snippet tabref "reference to a table" i
\\ref{tab:${1}} ${0}
endsnippet

snippet listingref "reference to a listing" i
${1:Listing}~\\ref{${2:list}}
endsnippet

snippet sectionref "reference to a section" i
\\ref{sec:${1}} ${0}
endsnippet

snippet pageref "reference to a page" i
\\pageref{${1}} ${0}
endsnippet

snippet index "index" i
\\index{${1:index}} ${0}
endsnippet

#bibliografia

#referencia bibliografica

#citas
snippet citen "\citen" i
\\citen{${1}} ${0}
endsnippet

snippet citep "\citep" i
\\citep{${1}} ${0}
endsnippet

snippet citet "\citet" i
\\citet{${1}} ${0}
endsnippet

snippet cite "\cite[]{}" i
\\cite[${1}]{${2}} ${0}
endsnippet

snippet citea "\citeauthor" i
\\citeauthor{${1}} ${0}
endsnippet

snippet citey "\citeyear" i
\\citeyear{${1}} ${0}
endsnippet

snippet footcite "\footcite[]{}" i
\\footcite[${1}]{${2}}${0}
endsnippet

#definiciones
snippet def "Definición" i
\begin{definicion}[$1]
	$0
\end{definicion}
endsnippet
  
#teoremas demostraciones
snippet dem "Demostracion" i
\begin{demostracion}
	$0
\end{demostracion}
endsnippet
 
snippet teo "Teorema" i
\begin{theorem}
	${0}
\end{theorem}
endsnippet

#otros entornos
snippet ej "Ejemplo en una sola columna" i
\begin{ej}
	\begin{pre}
		$1
	\end{pre}
	\begin{sol}
		$0
	\end{sol}
\end{ej}
endsnippet

snippet ej2 "Ejemplo en dos columna" i
\begin{ej}
  \begin{multicols}{2}
    \begin{pre}
      $1
    \end{pre}
    \begin{sol}
      $0
    \end{sol}
  \end{multicols}
\end{ej}
endsnippet

snippet ell "Ejemplo ilustrativo" i
\begin{ExampleIllustrative}
  $0
\end{ExampleIllustrative}
endsnippet
  
#indice alfabetico
  
#modulacion
snippet pr "Def problema" i
\newproblem{$1}{%
  $2
}{%
  $0
}
endsnippet

#otros comandos no matematicos
context "math()"
snippet mb "mbox" iA
\mbox{${1}} ${0}
endsnippet

context "math()"
snippet "\sec" "Ecuacion" riA
\tag{$1} $0
endsnippet

##############################
#  TEXTO EN MODO MATEMATICO  #
#############################
#modo matematico 
# priority 100
# snippet "\$" "modo matematico en linea" wrA
# $${1}$`!p
# if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', ':']:
#     snip.rv = ' '
# else:
#     snip.rv = ''
# `$2
# endsnippet

# priority 500
# snippet "(\w+|\w+,\w+)\$" "modo matematico en linea" riA
# $`!p snip.rv = match.group(1)`$ 
# endsnippet

# priority 600
# snippet "\$(\w+|\w+,\w+)\$" "modo matematico en linea" riA
# $`!p snip.rv = match.group(1)`$ 
# endsnippet

#Potencias 

#Subindices
context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet

context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

priority 100
context "math()"
snippet '(?<!i)stt' "text subscript" irA
_{\text{$1}}$0
endsnippet

# context "math()"
# snippet '([A-Za-z])_(\d)' "auto subscript" wrA
# `!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
# endsnippet

# context "math()"
# snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
# `!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
# endsnippet

#Superindices
# context "math()"
# snippet sr "^2" iA
# ^2
# endsnippet

# context "math()"
# snippet cb "^3" iA
# ^3
# endsnippet

# context "math()"
# snippet td "to the ... power" iA
# ^{$1}$0
# endsnippet

# context "math()"
# snippet rd "to the ... power" iA
# ^{($1)}$0
# endsnippet


# context "math()"
# snippet '([A-Za-z])(\d)' "auto supscript" wrA
# `!p snip.rv = match.group(1)`^`!p snip.rv = match.group(2)`
# endsnippet

# context "math()"
# snippet '([A-Za-z])(\d\d)' "auto supscript2" wrA
# `!p snip.rv = match.group(1)`^{`!p snip.rv = match.group(2)`}
# endsnippet

context "math()"
snippet ^^ "Description" iA
^{$1}$0
endsnippet

#Tamaño natural
snippet dm "Math" wA
\[${1:${VISUAL}}\] $0
endsnippet

# Fracciones
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet 

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

priority 300
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

#raices
# context "math()"
# snippet sq "\sqrt{}" iA
# \sqrt{${1:${VISUAL}}}$0
# endsnippet

priority 100
context "math()"
snippet `2 "\sqrt{}" iA
\sqrt{$1}$0
endsnippet

# priority 100
# context "math()"
# snippet `2 "\sqrt{}" i
# \sqrt{$1}$0
# endsnippet

# priority 500
# context "math()"
# snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)`2' "sqrt" wrA
# \\sqrt{`!p snip.rv = match.group(1)`}$0
# endsnippet

# priority 1000
# context "math()"
# snippet "^.*\)2" "() sqrt" wrA
# `!p
# stripped = match.string[:-1]
# depth = 0
# i = len(stripped) - 1
# while True:
# 	if stripped[i] == ')': depth += 1
# 	if stripped[i] == '(': depth -= 1
# 	if depth == 0: break;
# 	i-=1
# snip.rv = stripped[0:i] + "\\sqrt{" + stripped[i+1:-1] + "}"
# `$0
# endsnippet

#integrales
priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

#sumatoria
context "math()"
snippet "(?<!\\)sum" "sum" rwA
\sum\limits_{${1:i}=${2:1}}^{${3:n}}${0}
endsnippet

#productoria
context "math()"
snippet prod "product" iA
\prod\limits_{${1:i}=${2:1}}^{${3:n}}${0}
endsnippet


#limites
context "math()"
snippet '(?<!\\)lim' "limit" riA
\lim\limits_{${1:x}\to ${2:0}}${0}
endsnippet

#derivadas

#puntos consecutivos
priority 100
context "math()"
snippet · "cdot" iA
\cdot`!p snip.rv = after_commands()`$1
endsnippet

priority 100
context "math()"
snippet ... "ldots" iA
\ldots`!p snip.rv = after_commands()`$1
endsnippet

priority 1000
context "math()"
snippet v... "ldots" iA
\vdots`!p snip.rv = after_commands()`$1
endsnippet

priority 1000
context "math()"
snippet d... "ldots" iA
\ddots`!p snip.rv = after_commands()`$1
endsnippet

priority 1000
context "math()"
snippet c... "cdot" iA
\cdots`!p snip.rv = after_commands()`$1
endsnippet

#after delimiters
# priority 1000
# context "math()"
# snippet '\}' "left curly bracket" irA
# \}`!p snip.rv = after_delimiters()`$1
# endsnippet

#delimitadores
# snippet () "simple parent" iA
# ($1)$0
# endsnippet

# snippet [] "simple bracket" iA
# [$1]$0
# endsnippet

# snippet {} "simple brace" iA
# {$1}$0
# endsnippet

context "math()"
snippet "(?<!t)(\)\))" "left( right)" iAr 
\left($1\right)$0
endsnippet

context "math()"
snippet "(?<!t)(\|\|)" "left| right|" iAr
\left|$1\right|$0
endsnippet

context "math()"
snippet "(?<!t)(\}\})" "left\{ right\}" iAr
\left\\{$1\right\\}$0
endsnippet

context "math()"
snippet "(?<!t)(\]\])" "left[ right]" iAr
\left[$1\right]$0
endsnippet

context "math()"
snippet "(?<!t)(n\|)" "norm" iAr
\left\|$1\right\|$0
endsnippet

context "math()"
snippet "(?<!t)(\.\|)" "left. right|" iAr
\left. $1\right|$0
endsnippet

#delimitadores amstmath
context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor $0
endsnippet

#barras horizontales
context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

priority 10
context "math()"
snippet bar "overline" iA
\overline{$1}$0
endsnippet

# context "math()"
# snippet "(\s|\$)(\w+)\b" "overline" riA
# `!p snip.rv ="$" if match.group(1)=="$" else " "`\overline{`!p snip.rv=match.group(2)`}$0
# endsnippet

context "math()"
snippet "¯(\w|\d+)" "overline" riA
\overline{`!p snip.rv=match.group(1)`}`!p snip.rv = after_commands()`$1
endsnippet 

context "math()"
snippet "(?<!\\|n|\w)(\w+)¯" "overline" riA
\overline{`!p snip.rv=match.group(1)`}`!p snip.rv = after_commands()`$1
endsnippet

#llaves

#llaves horizontales

#vector unitario
context "math()"
priority 10
snippet `^ "hat" iA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "\su(\w+)\b\s" "Vector postfix" riA
\hat{`!p snip.rv=match.group(1)`} $0
endsnippet 

#vectores a,.
context "math()"
snippet "→([a-zA-Z])" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}`!p snip.rv = after_commands()`$1
endsnippet

context "math()"
snippet "(?<!\\|n|\w|\d)([a-zA-Z]+)→" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}`!p snip.rv = after_commands()`$1
endsnippet


# context "math()"
# snippet "\s(\w+)v" "vector" irA 
# \vec{`!p snip.rv=match.group(1)`}
# endsnippet

# context "math()"
# snippet "[$](\w+)v" "vector" irA 
# $\vec{`!p snip.rv=match.group(1)`}
# endsnippet


#negrilla modo matematico

#texto en modo matematico
priority -50
context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

#espacio modo matematico
context "math()"
snippet "` " "space in math mode" riA
\;
endsnippet

#centreado modo matematico \[\]

#equation
snippet equation "equation" i
\begin{equation}
  $0
\end{equation}
endsnippet

#areglos


#matrices
snippet matrix "matrix environment" i
\begin{${1:p/b/v/V/B/small}matrix}
  $0
\end{$1matrix}
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} 
  $1 
\end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} 
  $1 
\end{bmatrix} $0
endsnippet

#eqnarray

#align
snippet ali "Align" i
\begin{align*}
  ${1:${VISUAL}}
\end{align*}
endsnippet

#aligned conjunto de ecuaciones
context "math()"
snippet cjt "Conjunto de ecuaciones" i
\left[
\begin{aligned}
  ${0}
\end{aligned}
\right.
endsnippet

priority 100
context "math()"
snippet stm "Sistema de ecuaciones" i
\begin{systemeq}
  ${0}
\end{systemeq}
endsnippet

#multline




#otros entornos matematico
snippet form "Fórmula" i
\begin{hequation}
  $0
\end{hequation}
endsnippet

snippet resp "Respuesta" i
\begin{answer}
  ${0}
\end{answer}
endsnippet

snippet tabox "Tabla en caja" i
\begin{empheq}[box=\tabox{${1:título}}]{align*}
  ${0}
\end{empheq}
endsnippet

#letra griegas
context "math()"   
snippet `a "letra griega minuscula" iA
\alpha`!p snip.rv = after_greek_letter()`$1
endsnippet

context "math()"   
snippet à "letra griega minuscula" iA
\alpha`!p snip.rv = after_greek_letter()`$1
endsnippet

context "math()"   
snippet `b "letra griega minuscula" iA
\beta`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"   
snippet `c "letra griega minuscula" iA
\chi`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"
snippet `d "letra griega minuscula" iA
\delta`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"
snippet `e "letra griega minuscula" iA
\varepsilon`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"
snippet è "letra griega minuscula" iA
\varepsilon`!p snip.rv = after_greek_letter()`$1
endsnippet

context "math()"
snippet `f "letra griega minuscula" iA
\phi`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"
snippet `g "letra griega minuscula" iA
\gamma`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"   
snippet `h "letra griega minuscula" iA
\eta`!p snip.rv = after_greek_letter()`$1 
endsnippet  

context "math()"   
snippet `i "letra griega minuscula" iA
\iota`!p snip.rv = after_greek_letter()`$1
endsnippet  

# context "math()"   
#snippet `j "letra griega minuscula" iA
#`j
#endsnippet  

context "math()"   
snippet `k "letra griega minuscula" iA
\kappa`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"   
snippet `l "letra griega minuscula" iA
\lambda`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"   
snippet `m "letra griega minuscula" iA
\mu`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"   
snippet `n "letra griega minuscula" iA
\nu`!p snip.rv = after_greek_letter()`$1
endsnippet  

#context "math()"   
#snippet `o "letra griega minuscula" iA
# 
#endsnippet  

context "math()"   
snippet `p "letra griega minuscula" iA
\pi`!p snip.rv = after_greek_letter()`$1 
endsnippet  

context "math()"   
snippet `q "letra griega minuscula" iA
\theta`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"   
snippet `r "letra griega minuscula" iA
\rho`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"   
snippet `s "letra griega minuscula" iA
\sigma`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"   
snippet `t "letra griega minuscula" iA
\tau`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"   
snippet `u "letra griega minuscula" iA
\upsilon`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"   
snippet ù "letra griega minuscula" iA
\upsilon`!p snip.rv = after_greek_letter()`$1
endsnippet

context "math()"   
snippet `v "letra griega minuscula" iA
\varsigma`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"   
snippet `w "letra griega minuscula" iA
\omega`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"   
snippet `x "letra griega minuscula" iA
\xi`!p snip.rv = after_greek_letter()`$1 
endsnippet  

context "math()"   
snippet `y "letra griega minuscula" iA
\psi`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"   
snippet `z "letra griega minuscula" iA
\zeta`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `A "letra griega mayuscula" iA
\Alpha`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet À "letra griega mayuscula" iA
\Alpha`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `B "letra griega mayuscula" iA
\Beta`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `C "letra griega mayuscula" iA
\Chi`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `D "letra griega mayuscula" iA
\Delta`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `E "letra griega mayuscula" iA
\Varepsilon`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet È "letra griega mayuscula" iA
\Varepsilon`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `F "letra griega mayuscula" iA
\Varphi`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `G "letra griega mayuscula" iA
\Gamma`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `H "letra griega mayuscula" iA
\Eta`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `I "letra griega mayuscula" iA
\Iota`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet Ì "letra griega mayuscula" iA
\Iota`!p snip.rv = after_greek_letter()`$1
endsnippet  

#context "math()"  
#snippet `J "letra griega mayuscula" iA
#`J
#endsnippet  
   
context "math()"  
snippet `K "letra griega mayuscula" iA
\Kappa`!p snip.rv = after_greek_letter()`$1
endsnippet

context "math()"  
snippet `L "letra griega mayuscula" iA
\Lambda`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `M "letra griega mayuscula" iA
\Mu`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `N "letra griega mayuscula" iA
\Nu`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `O "letra griega mayuscula" iA
\Omicron`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `P "letra griega mayuscula" iA
\Pi`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `Q "letra griega mayuscula" iA
\Theta`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `R "letra griega mayuscula" iA
\Rho`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `S "letra griega mayuscula" iA
\Sigma`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `T "letra griega mayuscula" iA
\Tau`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `U "letra griega mayuscula" iA
\Upsilon`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet Ù "letra griega mayuscula" iA
\Upsilon`!p snip.rv = after_greek_letter()`$1
endsnippet

context "math()"  
snippet `V "letra griega mayuscula" iA
\Varsigma`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `W "letra griega mayuscula" iA
\Omega`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `X "letra griega mayuscula" iA
\Xi`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `Y "letra griega mayuscula" iA
\Psi`!p snip.rv = after_greek_letter()`$1
endsnippet  

context "math()"  
snippet `Z "letra griega mayuscula" iA
\Zeta`!p snip.rv = after_greek_letter()`$1
endsnippet  



#operadores binarios
context "math()"
snippet +- "pm" iA
\pm $0
endsnippet

context "math()"
snippet -+ "mp" iA
\pm $0
endsnippet

context "math()"
snippet xx "cross" iA
\times $0
endsnippet

context "math()"
snippet `o "circ" iA
\circ $0
endsnippet

priority -10
context "math()"
snippet II "cap" iA
\cap`!p snip.rv = after_commands()`$1
endsnippet

priority 100
context "math()"
snippet bII "cap" iA
\bigcap`!p snip.rv = after_commands()`$1
endsnippet

priority -10
context "math()"
snippet UU "cup" iA
\cup`!p snip.rv = after_commands()`$1
endsnippet

priority 100
context "math()"
snippet bUU "cup" iA
\bigcup`!p snip.rv = after_commands()`$1
endsnippet

context "math()"
snippet oo "or" iA
\lor $0
endsnippet

context "math()"
snippet yy "or" iA
\wedge $0
endsnippet

context "math()"
snippet O+ "oplus" iA
\oplus $0
endsnippet

context "math()"
snippet O- "ominus" iA
\ominus $0
endsnippet

context "math()"
snippet Ox "otimes" iA
\otimes $0
endsnippet



#operadores relacionales
priority 100
context "math()"
snippet CC "subset" Ai
\subset $0
endsnippet

context "math()"
snippet == "equals" iA
&= $0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

priority 100
context "math()"
snippet "->|to" "to" riA
\to $0
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow $0
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto $0
endsnippet

priority 100
context "math()"
snippet "~|nn" "~" riA
\sim $0
endsnippet

context "math()"
snippet "=>|ee" "implies" rAi
\Rightarrow $0
endsnippet

context "math()"
snippet =< "implied by" Ai
\Leftarrow $0
endsnippet

context "math()"
snippet "<=>|sss" "leftrightarrow" riA
\Leftrightarrow $0
endsnippet

context "math()"
snippet "€" "leftrightarrow" riA
\in`!p snip.rv = after_commands()`$1
endsnippet

priority -1000
context "math()"
snippet '(?<!\\|n|\w)(leq|geq|parallel|equiv|approx|cong|propto|perp)' "symb relations math" rwA
\\`!p snip.rv = match.group(1)``!p snip.rv = after_commands()`$1
endsnippet
# snippet '(?<!\\|n|\w|\{|\})(leq|geq|parallel|in|equiv|approx|cong|propto|perp)' "symb relations math" rwA

#negacion de relaciones
priority 100
context "math()"
snippet '(?<!\\)(nleq|ngeq|nin|nequiv|nparllel|napprox|ncong|npropto|nperp)' "negation sym relations" rwA
\\not\\`!p
command_name_negation=match.group(1)[1:]
snip.rv = command_name_negation``!p snip.rv = after_commands()`$1
endsnippet

priority 200
context "math()"
snippet nCC "subset" Ai
\not\subset $0
endsnippet

context "math()"
snippet n= "not equal" iA
\neq $0
endsnippet

#otros simbolos
context "math()"
snippet ell "l" iA
\ell`!p snip.rv = after_greek_letter()`$1
endsnippet

context "math()"
snippet `6 "partial" iA
\partial`!p snip.rv = after_greek_letter()`$1
endsnippet

context "math()"
snippet `8 "\infty" iA
\infty $0
endsnippet

context "math()"
snippet ø "emptyset" iA
\emptyset $0
endsnippet

context "math()"
snippet nab "nabla" iA
\nabla $0
endsnippet

context "math()"
snippet EE "exists" iA
\exists $0
endsnippet

priority 200
context "math()"
snippet nEE "not exists" iA
\not\exists $0
endsnippet

context "math()"
snippet AA "forall" iA
\forall $0
endsnippet

#funciones matematicos 
priority 200
context "math()"
snippet '(?<!\\|a)(sin|cos|tan|sec|csc|cot|ln|log|adj)' "functions math" rwA
\\`!p snip.rv = match.group(1)``!p snip.rv="" if t[1] in ["^"] else "\left("`$1`!p snip.rv="" if t[1] in ["^"] else "\\right)"`
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(asin|acos|atan|asec|acss|acot)' "function trig inverse" rwA
\\`!p 
function_trig=match.group(1)[1:]
snip.rv="arc"+function_trig
`\left($1\right) $0
endsnippet

#especiales

#simbolos del paquete amssymb
context "math()"
snippet "\\(R|Q|Z|I|N)" "mathbb R Q Z I" riA
\\mathbb{`!p snip.rv=match.group(1)`}
endsnippet



########################
#  PROGRAMACION LATEX  #
#######################
#comandos heber
context "math()"
snippet uu "Unidades" iA
\unit{$1}${0}
endsnippet

#nuevo comando 
snippet newcommand "newcommand" i
\newcommand`!p snip.rv='[' if t[1] else ""`${1:options}`!p snip.rv = ']' if t[1] else ""`{\\${2:name}}{${3:definition}}$0
endsnippet



#definicion


################################
#  TABLAS Y OBJETOS FLOTANTES  #
################################
#tabular
# snippet tabular "tabular / array environment" i
# \begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}}
#   $0${2/(?<=.)(c|l|r)|./(?1: & )/g}
# \end{$1${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
# endsnippet


pre_expand "create_table(snip)"
snippet "gentbl(\d+)x(\d+)" "Generate table of *width* by *height*" r
endsnippet

pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet

# snippet table "Table environment" i
# \begin{table}[${1:htpb}]
# 	\centering
# 	\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}
# 	$0${5/(?<=.)(c|l|r)|./(?1: & )/g}
# 	\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
# 	\caption{$2}
# 	\label{$3}
# \end{table}
# endsnippet


# snippet tabular "Tabular environment" i
# \begin{table}[${1:htpb}]
# 	\centering
# 	\begin{tabular}{${5:c}}
# 	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
# 	\end{tabular}
# 	\caption{${2:caption}}
# 	\label{tab:${3:label}}
# \end{table}
# endsnippet

#longtable
# snippet longtable "Longtable" i
# \begin{table}[H]
# 	\centering
# 	\begin{longtable}[C]{${1}}
# 		\toprule
# 			${2}
# 		\midrule
# 			${3}
# 		\bottomrule
# 	\end{longtable}
# 	\caption{${4}}
# \end{table}
# endsnippet

# snippet htabular "htabular" 
# \begin{table}[H]
# 	\centering
# 	\begin{htabular}{${0}}
# 		\tw{}  &\tw{}					\\\ \midrule
# 						&               \\\ \midrule
# 						&
# 	\end{htabular}
# 	\caption{}
# \end{table}
# endsnippet

#figure
snippet tikzm "Figura tikz en el margen" i
\begin{scaletikzpicturetowidth}{\marginparwidth}
  \begin{tikzpicture}[scale=\tikzscale]
    $1
  \end{tikzpicture}
\end{scaletikzpicturetowidth}
$0
endsnippet

snippet gIn "Gráfica inecuaciones" i
\begin{center} 
	\begin{scaletikzpicturetowidth}{7cm}
		\begin{tikzpicture}[scale=\\tikzscale]
			\def\numerosCriticos{${0:puntos critico}}
			\def\simbolo{/} %punto critico/simbolo
			\def\cerradoAbierto{/} %punto critico/cerrado o abierto
			\def\inicial{-} %+ o -
			\def\final{+} %+ o -
			\graficaIntervalos
			\scoped[on background layer]{
				\draw[latex-latex, \lineaColor, line width=\lineaGrosor]
				(\inicialX,\yy) -| (,\yy) -- (\finalX,\yy);
			}
		\end{tikzpicture}
	\end{scaletikzpicturetowidth}
\end{center}
endsnippet

#figure asympotote
snippet figasy "Figura asymptote" i
\begin{figure}[H]
  \centering
  \begin{asy}
    $0
  \end{asy}
  \caption{}
\end{figure}
endsnippet

#graficas por algún paquete
snippet grpb "Gráfica en body" i
% \reffig{$1}
\begin{graphbody}{$1}
  $0
\end{graphbody}
endsnippet

snippet grpm "Gráfica en body" i
% \reffig{$1}
\begin{graphmargin}{$1}
  $0
\end{graphmargin}
endsnippet

snippet grpfw "Gráfica en body" i
% \reffig{$1}
\begin{graphfullwidth}{$1}
  $0
\end{graphfullwidth}
endsnippet

snippet subgrp "Subgráfica" i
\subgraph{%\reffig{$1}
  $0
}{$1}
endsnippet

#images
snippet imgb "Imagen sin referencia" i
% \reffig{$1}
\imagebody{$1}$0
endsnippet

snippet imgq "Imagen sin referencia" i
\imagequestion{$1}$0
endsnippet

snippet imgm "Imagen en el margen" i
% \reffig{$1}
\imagemargin{$1}$0
endsnippet

snippet imgbs "N images en el margen" i
% \reffig{$1}
\begin{imagebodyseveral}{$1}
  \subimage{$1$2}
  \subimage{$1$3}
\end{iimagebodyseveral}
$0
endsnippet

snippet imgms "N images en el margen" i
% \reffig{$1}
\begin{imagemarginseveral}{$1}
  \subimage{$1$2}
  \subimage{$1$3}
\end{imagemarginseveral}
$0
endsnippet

snippet imgfws "N images en el margen" i
% \reffig{$1}
\begin{imagefullwidthseveral}{$1}
  \subimage{$1$2}
  \subimage{$1$3}
\end{imagefullwidthseveral}
$0
endsnippet

#tabla
snippet tblm "Imagen en el margen" i
% \reftbl{$1}
\begin{tabularmargin}{$2}{$1}
  $0
\end{tabularmargin}
endsnippet

snippet tblb "Imagen en el margen" i
% \reftbl{$1}
\begin{tabularmargin}{$2}{$1}
  $0
\end{tabularmargin}
endsnippet

snippet tblfw "Imagen en el margen" i
% \reftbl{$1}
\begin{tabularfullwidth}{$2}{$1}
  $0
\end{tabularfullwidth}
endsnippet
#fuentes en tablas

#color de tablas

#rotacion texto 

#expresion arroba{}

#unirceldas

#tabla en modo matematico

###############
#  TCOLORBOX  #
###############


##########
#  TIKZ  #
##########
snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

snippet tikz "Entorno tikz" i
\begin{center}
	\begin{tikzpicture}
		${0}
	\end{tikzpicture}
\end{center}
endsnippet


#######################
#  INSERTAR GRAFICOS  #
#######################

################################
#  EDICION GRAFICOS Y FIGURAS  #
################################

################################
#  PERSONALIZACION DOCUMENTOS  #
################################


#plantillas

#libro de algoritmos y programacion

# \begin{listing}
snippet "mint(ed)?( (\S+))?" "Minted code typeset" ir
\begin{minted}{${1:`!p snip.rv = match.group(3) if match.group(2) is not None else "language"`}}
  ${0:${VISUAL:code}}
\end{minted}
endsnippet
# \end{listing}
# \label{lst:${4:${3/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
# \caption{${3:caption name}}

snippet cin "mintinline" iA
\mintinline{$1}{$2}$0
endsnippet
############
#  BEANER  #
############



###########
#  SYMPY  #
###########
snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet



#########################
#  MATEMATICA SOFTWARE  #
#########################
priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet



